diff --git a/__pycache__/client3.cpython-310-pytest-8.2.2.pyc b/__pycache__/client3.cpython-310-pytest-8.2.2.pyc
new file mode 100644
index 0000000..7f8d9c7
Binary files /dev/null and b/__pycache__/client3.cpython-310-pytest-8.2.2.pyc differ
diff --git a/client3.py b/client3.py
index 3fc09b7..173edbf 100644
--- a/client3.py
+++ b/client3.py
@@ -22,6 +22,7 @@ import json
 import random
 import urllib.request
 
+
 # Server API URLs
 QUERY = "http://localhost:8080/query?id={}"
 
@@ -35,14 +36,16 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price+ask_price)/2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if(price_b==0):
+        return
+    return price_a/price_b
 
 
 # Main
@@ -52,8 +55,12 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+        if(prices.size()>=2):
+            stock_a , stock_b = list(prices.keys())[:2]
 
-        print("Ratio %s" % getRatio(price, price))
+            print("Ratio %s" % getRatio(prices[stock_a], prices[stock_b]))
diff --git a/client_test.py b/client_test.py
index af2bf26..ef1d2de 100644
--- a/client_test.py
+++ b/client_test.py
@@ -8,6 +8,16 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      expected_stock = quote['stock']
+      expected_ask = quote['top_ask']['price']
+      expected_bid = quote['top_bid']['price']
+      expected_price = (expected_ask+expected_bid)/2
+      self.assertEqual(stock,expected_stock)
+      self.assertEqual(bid_price,expected_bid)
+      self.assertEqual(ask_price,expected_price)
+      self.assertEqual(price,expected_price)
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +25,31 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-
-
+    stock, bid_price, ask_price, price = getDataPoint(quote)
+    expected_stock = 'ABC'
+    expected_ask = 119.2
+    expected_bid = 120.48
+    expected_price = (expected_ask+expected_bid)/2
+    self.assertEqual(stock,expected_stock)
+    self.assertEqual(bid_price,expected_bid)
+    self.assertEqual(ask_price,expected_price)
+    self.assertEqual(price,expected_price)
   """ ------------ Add more unit tests ------------ """
-
+  def test_getDataPoint_calculatePriceBidLessThanAsk(self):
+    quotes = [
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    """ ------------ Add the assertion below ------------ """
+    stock, bid_price, ask_price, price = getDataPoint(quote)
+    expected_stock = 'DEF'
+    expected_ask = 121.68
+    expected_bid = 117.87
+    expected_price = (expected_ask+expected_bid)/2
+    self.assertEqual(stock,expected_stock)
+    self.assertEqual(bid_price,expected_bid)
+    self.assertEqual(ask_price,expected_price)
+    self.assertEqual(price,expected_price)
 
 
 if __name__ == '__main__':
